# -*- coding: utf-8 -*-
"""Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lAWP_g3M6OhWbZ5KoXapH08EVjsFIE05

***IMPORTING THE IMPORTANT PACKAGES.***
"""

#lets importing some necessary packages
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

"""***Mounting the google drive and importing the datasets.***"""

from google.colab import drive
drive.mount('/content/drive')
path1 = "/content/drive/MyDrive/Dataset/mental-and-substance-use-as-share-of-disease.csv"
df1 = pd.read_csv(path1)
df1.head()

path2 = "/content/drive/MyDrive/Dataset/prevalence by mental disorder.csv"
df2 = pd.read_csv(path2)
df2.head()

"""**Merging the datasets for optimal results.**"""

import seaborn as sns

#merging data
df=pd.merge(df1,df2)

df.head()

df.shape,df.size

"""***Cleaning the Dataset.***"""

df.isnull().sum()

#690 code is missing in dataset so we have to remove this column as we dont need this in future
df=df.dropna()

df.isnull().sum()

df.drop("Code",axis=1,inplace=True)





df.columns = ['Country', 'Year', 'Schizophrenia', 'Bipolar_disorder', 'Eating_disorder', 'Anxiety', 'drug_usage', 'depression', 'alcohol', 'mental_fitness','memory_loss']

df.head()

"""***Colour Map respresentation of our data.***"""

plt.figure(figsize=(12,6))
sns.heatmap(df.corr(),annot=True,cmap='Reds')
plt.show()

"""**Histogram representation of data.**"""

sns.pairplot(df,corner=True)
plt.show()

"""**Box plot representation**"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df.drop(['Country', 'Year'], axis=1))
plt.xticks(rotation=45)
plt.title("Box Plot of Numerical Features")
plt.show()

"""**Line plot representation**"""

plt.figure(figsize=(12, 6))
sns.lineplot(x='Year', y='mental_fitness', data=df)
plt.title("Trend of Mental Fitness Over the Years")
plt.show()

"""**Scatter plot representation**"""

numerical_features = ['Schizophrenia', 'Bipolar_disorder', 'Eating_disorder', 'Anxiety',
                      'drug_usage', 'depression', 'alcohol', 'memory_loss']

plt.figure(figsize=(12, 6))
for feature in numerical_features:
    sns.scatterplot(x=feature, y='mental_fitness', data=df)
plt.legend(numerical_features)
plt.title("Scatter Plot: Mental Fitness vs. Numerical Features")
plt.show()

"""**Pair plot representation**"""

plt.figure(figsize=(12, 8))
sns.pairplot(df, hue='mental_fitness', corner=True)
plt.show()

mean = df['mental_fitness'].mean()
mean

"""***Encoding the categorial values.***"""

from sklearn.preprocessing import LabelEncoder

l = LabelEncoder()
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = l.fit_transform(df[column])
df.head()

df['Country'].unique()

"""**Assigning feature of Matrix and Dependent Variables.**"""

x=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

"""**Splitting the Dataset into Training set and Testing set.**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""**Implementing the Regression Algorithms and choose which one is better based on results.**

**1. Linear Regression.**
"""

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)

#predicting the value

y_pred=lr.predict(x_test)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for Linear Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(y_test,y_pred),r2_score(y_test,y_pred)))

"""**2. Decision Tree Regression.**"""

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor(random_state=0)
dtr.fit(x_train,y_train)

#predicting the value

y_pred=dtr.predict(x_test)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for Decision Tree Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(y_test,y_pred),r2_score(y_test,y_pred)))

"""**3. RandomForest Regression.**"""

from sklearn.ensemble import RandomForestRegressor
rfr= RandomForestRegressor(n_estimators=10,random_state=42)
rfr.fit(x_train,y_train)

#predicting the value

y_pred=rfr.predict(x_test)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for Decision Tree Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(y_test,y_pred),r2_score(y_test,y_pred)))



"""**Conclusion:**
**Random Forest Regression works well on both train and test sets with r2 score of 0.9926.**

***As well as Decision Tree Regression also works well on both train and test set with r2 score of 0.9905. ***

***Functioning of the model using Random Forest Regression.***
"""

np.random.seed(range(0,100))
print("Welcome to Mental Fitness Tracker!\nFill the detail to check your mental fitness!")
country=l.fit_transform([input('Enter Your country Name:')])
year=int(input("Enter the Year:"))
schizo=(float(input("Enter your Schizophrenia rate in % (it not enter 0):")))*100
bipolar_dis=(float(input("Enter your Bipolar disorder rate in % (it not enter 0):")))*100
eating_dis=(float(input("Enter your Eating disorder rate in % (it not enter 0):")))*100
anxiety=(float(input("Enter your Anxiety rate in % (it not enter 0):")))*10
drug_use=(float(input("Enter your Drug Usage rate in per year % (it not enter 0):")))*100
deprsn=(float(input("Enter your Depression rate in % (it not enter 0):")))*10
alch=(float(input("Enter your Alcohol Consuming rate per year in % (it not enter 0):")))*100
memory_loss=(float(input("Enter your memory_loss rate per year in % (it not enter 0):")))*100
prediction=rfr.predict([[country,year,schizo,bipolar_dis,eating_dis,anxiety,drug_use,deprsn,alch,memory_loss]])
print("Your Mental Fitness is {:.2f}%".format(prediction[0]))
print("Thank you and Bye!")

import pickle

# Assuming 'rfr' is the trained model
pickle.dump(rfr, open('model.pk1', 'wb'))

# Assuming the file is located at '/content/model.pk1'
with open('/content/model.pk1', 'rb') as file:
    obj = pickle.load(file)

# Now you can use the loaded object to make predictions
result = obj.predict([[0, 2023, 0.60, 0.50, 0.40, 0.30, 0.20, 0.25, 0.10, 0.05]])
print(result)

